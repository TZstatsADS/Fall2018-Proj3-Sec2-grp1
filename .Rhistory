source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("xgboost")
#install.packages("abind")
library(abind)
set.seed(2018)
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
train_dir <- "/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train_HR_dir
run.cv=TRUE
K <- 3
run.test=TRUE
run.feature.train=TRUE
run.feature.test=TRUE
#model_values<-seq(2,6,by=2) #depth for GBM
#model_values<-seq(0.01,0.31,by=0.1) #eta for xgboost
df <- data.frame(matrix(ncol = 2, nrow = 9))
x <- c("nrounds", "depth")
colnames(df) <- x
#nrounds = seq(20, 100, 30)
nrounds<-c(5,9,14)
depth <-c(2,5,8)
eta <- 0.6
df$nrounds <- rep(nrounds, each = length(depth))
df$depth <- rep(rep(depth), length(nrounds))
df$eta <- rep(eta, length(nrounds)*length(depth))
model_values <- df
model_labels = paste("xgboost with numTrees =", model_values)
#model_labels = paste("GBM with depth =", model_values)
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/feature_train.RData")
#load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/feature_train.RData")
#feat_train<-dat_train$feature
#label_train<-dat_train$label
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/train.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/test.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(nrow(model_values), 2))
for(k in 1:nrow(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train,
depth=model_values$depth,
nrounds=model_values$nrounds,
K)
}
save(err_cv, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),2]-err_cv[c(1,2,3),2]+0.0030),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2])))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,2]-err_cv[4:6,2]+0.00304),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,2]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
#model_best=model_values
if(run.cv){
model_best <- model_values[which.min(err_cv[,1]),]
}
par_best <- list( depth=model_best$depth, nrounds=model_best$nrounds)
par_best
View(df)
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
MSE<-err_cv[which.min(err_cv[,1]),1]
MSE<-err_cv[which.min(err_cv[,1]),1]
MSE
PSNR<-20*log10(1)-10*log10(MSE)
PSNR
MSE
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0030),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2])))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.00304),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
View(err_cv)
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0030),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2])))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.00304),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0030),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2])))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2])))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.003)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00002)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.0005)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.0001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]+0.0040),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.0001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.0001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]+0.0004),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]+0.00305),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.0001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]-0.00001),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]-0.00001),max(err_cv[7:9,1]+err_cv[7:9,2]+0.0001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.0001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]-0.00001),max(err_cv[4:6,1]+err_cv[4:6,2]+0.0001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]-0.00001),max(err_cv[7:9,1]+err_cv[7:9,2]+0.000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
save(fit_train, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]-0.00001),max(err_cv[4:6,1]+err_cv[4:6,2]+0.000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]-0.00001),max(err_cv[7:9,1]+err_cv[7:9,2]+0.000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/superResolution.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/test.R")
test_dir <- "/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
#print(test_LR_dir)
test_HR_dir <- paste(test_dir, "HR/", sep="")
#test_LR_dir<-
tm_test=NA
if(run.test){
load(file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
MSE<-err_cv[which.min(err_cv[,1]),1]
MSE
PSNR<-20*log10(1)-10*log10(MSE)
PSNR
set.seed(2018)
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
train_dir <- "./data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train_HR_dir
source("./lib/feature.R")
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
source("./lib/feature.R")
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(test_LR_dir, test_HR_dir))
feat_test <- dat_test$feature
label_test <- dat_test$label
}
set.seed(2018)
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
train_dir <- "./data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
test_dir <- "./data/train_set/"
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
test_label_path <- paste(test_dir, "label.csv", sep="")
#train_HR_dir
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
source("./lib/feature.R")
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(test_LR_dir, test_HR_dir))
feat_test <- dat_test$feature
label_test <- dat_test$label
}
save(dat_train, file="./output/feature_test.RData")
#load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/feature_train.RData")
#feat_train<-dat_train$feature
#label_train<-dat_train$label
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/feature_train.RData")
feat_train<-dat_train$feature
label_train<-dat_train$label
source("./lib/superResolution.R")
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
source("./lib/superResolution.R")
source("./lib/test.R")
test_dir <- "./data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
#print(test_LR_dir)
test_HR_dir <- paste(test_dir, "HR/", sep="")
#test_LR_dir<-
tm_test=NA
if(run.test){
load(file="./output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
source("./lib/superResolution.R")
source("./lib/test.R")
test_dir <- "./data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
#print(test_LR_dir)
test_HR_dir <- paste(test_dir, "HR/", sep="")
#test_LR_dir<-
tm_test=NA
if(run.test){
load(file="./output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
MSE<-err_cv[which.min(err_cv[,1]),1]
MSE
PSNR<-20*log10(1)-10*log10(MSE)
PSNR
