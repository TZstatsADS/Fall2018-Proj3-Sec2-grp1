run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(par=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
View(err_cv)
which.min(err_cv[,1])
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
fit_train <- train(dat_train, label_train, par_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
par_best$par
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
knitr::opts_chunk$set(echo = TRUE)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("xgboost")
set.seed(2018)
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
train_dir <- "/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train_HR_dir
run.cv=TRUE
K <- 2
run.test=TRUE
run.feature.train=TRUE
run.feature.test=TRUE
model_values<-seq(3,5,2) #depth for GBM
xgboost_values<-seq(0.1,0.5,by=0.1) #eta for xgboost
svm_values<-seq(0.01,0.1, by=0.02)
model_labels = paste("GBM with depth =", model_values)
source("/Users/lingyizhao/Documents/GitHub/Music-Recommendation/Fall2018-Proj3-Sec2-grp1/lib/feature.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
install.packages("abind")
install.packages("abind")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("abind")
library(abind)
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/feature_train.RData")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/train.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/test.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[k], K)
}
save(err_cv, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("xgboost")
#install.packages("abind")
library(abind)
set.seed(2018)
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
train_dir <- "/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train_HR_dir
run.cv=TRUE
K <- 2
run.test=TRUE
run.feature.train=TRUE
run.feature.test=TRUE
model_values<-seq(3,5,2) #depth for GBM
xgboost_values<-seq(0.1,0.5,by=0.1) #eta for xgboost
svm_values<-seq(0.01,0.1, by=0.02)
model_labels = paste("GBM with depth =", model_values)
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/feature_train.RData")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/train.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/test.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[k], K)
}
save(err_cv, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[k], K)
}
save(err_cv, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
}
if(run.cv){
load("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/err_cv.RData")
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
save(fit_train, file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
source("../lib/superResolution.R")
source("./lib/superResolution.R")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
library(abind)
library("abind")
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/superResolution.R")
test_dir <- "./data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
source("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/lib/superResolution.R")
test_dir <- "/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1/output/fit_train.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
getwd()
rm(list = ls())
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("xgboost")
#install.packages("abind")
library(abind)
set.seed(2018)
setwd("../")
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
#train_HR_dir
set.seed(2018)
setwd("../")
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
getwd()
run.cv=TRUE
K <- 3
run.test=TRUE
run.feature.train=TRUE
run.feature.test=TRUE
getwd()
set.seed(2018)
opts_chunk$set(root.dir = '../')
set.seed(2018)
opts_chunk$set(root.dir = '../')
set.seed(2018)
knitr::opts_knit$set(root.dir = '../')
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
set.seed(2018)
knitr::opts_knit$set(root.dir = '../')
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
set.seed(2018)
knitr::opts_knit$set(root.dir = './')
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
set.seed(2018)
knitr::opts_knit$set(root.dir = '../')
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
set.seed(2018)
knitr::opts_knit$set(root.dir = '..')
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
set.seed(2018)
opts_knit$set(root.dir=normalizePath('../'))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("xgboost")
#install.packages("abind")
library(abind)
library(knitr)
set.seed(2018)
opts_knit$set(root.dir=normalizePath('../'))
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
getwd()
opts_knit$set(root.dir=normalizePath('../'))
getwd()
setwd("../")
getwd()
set.seed(2018)
knitr::opts_knit$set(root.dir = '../' )
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
cat("../",getwd())
getwd()
run.cv=TRUE
K <- 3
run.test=TRUE
run.feature.train=TRUE
run.feature.test=TRUE
getwd()
set.seed(2018)
setwd("../")
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
getwd()
#train_HR_dir
seq(20, 100, 30)
#model_values<-seq(2,8,by=2) #depth for GBM
#model_values<-seq(0.01,0.31,by=0.1) #eta for xgboost
df <- data.frame(matrix(ncol = 2, nrow = 9))
x <- c("nrounds", "depth")
colnames(df) <- x
#nrounds = seq(20, 100, 30)
nrounds<-c(5,7,11)
depth <-c(2,5,8)
eta <- 0.5
df$nrounds <- rep(nrounds, each = length(depth))
df$depth <- rep(rep(depth), length(nrounds))
df$eta <- rep(eta, length(nrounds)*length(depth))
model_values <- df
model_labels = paste("xgboost with numTrees =", model_values)
#model_labels = paste("GBM with depth =", model_values)
model_values
model_labels
t(model_values)
#model_values<-seq(2,8,by=2) #depth for GBM
#model_values<-seq(0.01,0.31,by=0.1) #eta for xgboost
df <- data.frame(matrix(ncol = 2, nrow = 9))
x <- c("nrounds", "depth")
colnames(df) <- x
#nrounds = seq(20, 100, 30)
nrounds<-c(5,7,11)
depth <-c(2,5,8)
eta <- 0.5
df$nrounds <- rep(nrounds, each = length(depth))
df$depth <- rep(rep(depth), length(nrounds))
df$eta <- rep(eta, length(nrounds)*length(depth))
model_values <- df
model_labels = paste("xgboost with numTrees =", t(model_values))
#model_labels = paste("GBM with depth =", model_values)
model_values
model_labels
t(model_values)
source("../lib/feature.R")
