library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 3  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
# df -  is the feature combinations for baseline gbm
df <- data.frame(matrix(ncol = 3, nrow = 36))
x <- c("numTrees", "minNode", "shrinkage")
colnames(df) <- x
numTrees = seq(60, 110, 20)
minNode = seq(5, 15, 3)
shrinkage = seq(0.05, 0.1, 0.02)
df$numTrees <- rep(numTrees, each = length(minNode)*length(shrinkage))
df$minNode <- rep(rep(minNode, each = length(shrinkage)), length(numTrees))
df$shrinkage <- rep(shrinkage, length(numTrees)*length(minNode))
model_values <- df
#model_labels = paste("GBM with numTrees =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/train_baseline.R")
source("../lib/test_baseline.R")
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
source("../lib/superResolution.R")
test_dir <- "../data/test_set1/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
load("../output/err_cv_baseline.RData")
err_cv_baseline
err_cv
df
$
plot(1:36, err_cv[,1], xlab="parameter combianation", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n")
)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=levels(df$numTrees), pch=16, col=c("red", "blue", "black"))
plot(1:36, err_cv[,1], xlab="parameter combianation", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n")
)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=levels(df$numTrees), pch=16, col=c("red", "blue", "black"))
levels(df$numTrees)
levels(as.factor(df$numTrees))
legend("topright", legend=levels(as.factor(df$numTrees)), pch=16, col=c("red", "blue", "black"))
levels(as.factor(df$numTrees))
paste('numTrees = ', levels(as.factor(df$numTrees)), )
paste('numTrees = ', levels(as.factor(df$numTrees)) )
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
df
minNode
rep(minNode, 12)
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
axis(1, at=1:36, labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
axis(1,  labels=df$minNode)
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
axis(1, at=1:36, labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
plot.new()
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
axis(1, at=1:36, labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
axis(1, at=1:36, labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
axis(1, at=1:36, labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
#lines(1:12, err_cv[1:12,1], col="blue")
points(13:24, err_cv[13:24,1], col="blue", pch=16)
#lines(13:24, err_cv[13:24,1], col="red")
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n"))
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n")
axis(1, at=1:36, labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
points(13:24, err_cv[13:24,1], col="blue", pch=16)
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
df$minNode
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n")
axis(1, at=seq(1,36,by=1), labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
points(13:24, err_cv[13:24,1], col="blue", pch=16)
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
load("../output/err_cv_new.RData")
load("../output/err_cv_baseline.RData")
load("../output/err_cv_baseline.RData")
setwd("~/Documents/GitHub/Fall2018-Proj3-Sec2-grp1/doc")
load("../output/err_cv_baseline.RData")
load("../output/err_cv_baseline.RData")
mse_baseline <- err_cv[which.min(err_cv[,1]),1]
PSNR_baseline <- 20 * log10(1) - 10 * log10(mse_baseline)
mse_baseline
PSNR_baseline
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
load("../output/err_cv_baseline.RData")
mse_baseline <- err_cv[which.min(err_cv[,1]),1]
PSNR_baseline <- 20 * log10(1) - 10 * log10(mse_baseline)
mse_baseline
PSNR_baseline
#cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
load("../output/err_cv_baseline.RData")
mse_baseline <- err_cv[which.min(err_cv[,1]),1]
PSNR_baseline <- 20 * log10(1) - 10 * log10(mse_baseline)
mse_baseline
PSNR_baseline
#cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
load("../output/err_cv_baseline.RData")
mse_baseline <- err_cv[which.min(err_cv[,1]),1]
PSNR_baseline <- 20 * log10(1) - 10 * log10(mse_baseline)
mse_baseline
PSNR_baseline
#cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#cat("Time for training model=", tm_train[1], "s \n")
cat("Time for super-resolution=", tm_test[1], "s \n")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 3  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
# df -  is the feature combinations for baseline gbm
df <- data.frame(matrix(ncol = 3, nrow = 36))
x <- c("numTrees", "minNode", "shrinkage")
colnames(df) <- x
numTrees = seq(60, 110, 20)
minNode = seq(5, 15, 3)
shrinkage = seq(0.05, 0.1, 0.02)
df$numTrees <- rep(numTrees, each = length(minNode)*length(shrinkage))
df$minNode <- rep(rep(minNode, each = length(shrinkage)), length(numTrees))
df$shrinkage <- rep(shrinkage, length(numTrees)*length(minNode))
model_values <- df
#model_labels = paste("GBM with numTrees =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/train_baseline.R")
source("../lib/test_baseline.R")
if(run.cv){
load("../output/err_cv_baseline.RData")
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n")
axis(1, at=seq(1,36,by=1), labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
points(13:24, err_cv[13:24,1], col="blue", pch=16)
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
}
if(run.cv){
model_best <- model_values[which.min(err_cv[,1]),]
}
par_best <- list(depth = 1, numTrees = model_best$numTrees, minNode = model_best$minNode,  shrinkage=model_best$shrinkage)
par_best
source("../lib/train_baseline.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))#, par_best
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
#tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
load(../output/feature_train_baseline.RData)
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
#tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
load('../output/feature_train_baseline.RData')
feat_train <- dat_train$feature
label_train <- dat_train$label
}
load('../output/feature_train_baseline.RData')
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
#tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
load('../output/feature_train.RData')
feat_train <- dat_train$feature
label_train <- dat_train$label
}
#save(dat_train, file="../output/feature_train.RData")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("../lib/train_baseline.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))#, par_best
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 3  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
# df -  is the feature combinations for baseline gbm
df <- data.frame(matrix(ncol = 3, nrow = 36))
x <- c("numTrees", "minNode", "shrinkage")
colnames(df) <- x
numTrees = seq(60, 110, 20)
minNode = seq(5, 15, 3)
shrinkage = seq(0.05, 0.1, 0.02)
df$numTrees <- rep(numTrees, each = length(minNode)*length(shrinkage))
df$minNode <- rep(rep(minNode, each = length(shrinkage)), length(numTrees))
df$shrinkage <- rep(shrinkage, length(numTrees)*length(minNode))
model_values <- df
#model_labels = paste("GBM with numTrees =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="../output/feature_train.RData")
source("../lib/train_baseline.R")
source("../lib/test_baseline.R")
if(run.cv){
load("../output/err_cv_baseline.RData")
plot(1:36, err_cv[,1], xlab="minNode", ylab="CV Error",
main="CV Error for BGM with depth = 1", type="n",xaxt = "n")
axis(1, at=seq(1,36,by=1), labels=df$minNode)
points(1:12, err_cv[1:12,1], col="red", pch=16)
points(13:24, err_cv[13:24,1], col="blue", pch=16)
points(25:36, err_cv[25:36,1], col="brown", pch=16)
lines(1:36, err_cv[,1], col="black", type = 'b')
legend("topright", legend=paste('numTrees = ', levels(as.factor(df$numTrees)) ), pch=16, col=c("red", "blue", "black"))
}
if(run.cv){
model_best <- model_values[which.min(err_cv[,1]),]
}
par_best <- list(depth = 1, numTrees = model_best$numTrees, minNode = model_best$minNode,  shrinkage=model_best$shrinkage)
par_best
source("../lib/train_baseline.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))#, par_best
save(fit_train, file="../output/fit_train_baseline.RData")
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
source("../lib/superResolution.R")
test_dir <- "../data/test_set1/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train_baseline.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
load("../output/err_cv_baseline.RData")
mse_baseline <- err_cv[which.min(err_cv[,1]),1]
PSNR_baseline <- 20 * log10(1) - 10 * log10(mse_baseline)
mse_baseline
PSNR_baseline
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for super-resolution=", tm_test[1], "s \n")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("xgboost")
#install.packages("abind")
library(abind)
set.seed(2018)
setwd("/Users/lingyizhao/Documents/GitHub/Fall2018-Proj3-Sec2--group_1")
source("./lib/train.R")
source("../lib/train.R")
source("../lib/train_xgboost.R")
source("../lib/test_xgboost.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
source("../lib/train_xgboost.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
install.packages("caret")
install.packages("e1071")
source("../lib/train_xgboost.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
install.packages("caret")
source("../lib/train_xgboost.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
if(run.cv){
load("./output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]-0.00001),max(err_cv[4:6,1]+err_cv[4:6,2]+0.000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]-0.00001),max(err_cv[7:9,1]+err_cv[7:9,2]+0.000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
run.cv=TRUE
K <- 3
run.test=TRUE
run.feature.train=TRUE
run.feature.test=TRUE
if(run.cv){
load("./output/err_cv.RData")
plot(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=5", type="n", ylim=c(min(err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2]-0.00001),max(err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2]+0.00001)))
points(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue", pch=16)
lines(model_values[c(1,2,3),2], err_cv[c(1,2,3),1], col="blue")
arrows(model_values[c(1,2,3),2], err_cv[c(1,2,3),1]-err_cv[c(1,2,3),2], model_values[c(1,2,3),2], err_cv[c(1,2,3),1]+err_cv[c(1,2,3),2],
length=0.1, angle=90, code=3)
plot(model_values[4:6,2], err_cv[4:6,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=7", type="n", ylim=c(min(err_cv[4:6,1]-err_cv[4:6,2]-0.00001),max(err_cv[4:6,1]+err_cv[4:6,2]+0.000001)))
points(model_values[4:6,2], err_cv[4:6,1], col="blue", pch=16)
lines(model_values[4:6,2], err_cv[4:6,1], col="blue")
arrows(model_values[4:6,2], err_cv[4:6,1]-err_cv[4:6,2], model_values[4:6,2], err_cv[4:6,1]+err_cv[4:6,2],
length=0.1, angle=90, code=3)
plot(model_values[7:9,2], err_cv[7:9,1], xlab="Max.Depth", ylab="CV Error",
main="Cross Validation Error for nrounds=11", type="n", ylim=c(min(err_cv[7:9,1]-err_cv[7:9,2]-0.00001),max(err_cv[7:9,1]+err_cv[7:9,2]+0.000001)))
points(model_values[7:9,2], err_cv[7:9,1], col="blue", pch=16)
lines(model_values[7:9,2], err_cv[7:9,1], col="blue")
arrows(model_values[7:9,2], err_cv[7:9,1]-err_cv[7:9,2], model_values[7:9,2], err_cv[7:9,1]+err_cv[7:9,2],
length=0.1, angle=90, code=3)
}
load("../output/err_cv.RData")
#model_best=model_values
if(run.cv){
model_best <- model_values[which.min(err_cv[,1]),]
}
#model_values<-seq(2,6,by=2) #depth for GBM
#model_values<-seq(0.01,0.31,by=0.1) #eta for xgboost
df <- data.frame(matrix(ncol = 2, nrow = 9))
x <- c("nrounds", "depth")
colnames(df) <- x
#nrounds = seq(20, 100, 30)
nrounds<-c(5,9,14)
depth <-c(2,5,8)
eta <- 0.6
df$nrounds <- rep(nrounds, each = length(depth))
df$depth <- rep(rep(depth), length(nrounds))
df$eta <- rep(eta, length(nrounds)*length(depth))
model_values <- df
model_labels = paste("xgboost with numTrees =", model_values)
#model_labels = paste("GBM with depth =", model_values)
load("../output/err_cv.RData")
#model_best=model_values
if(run.cv){
model_best <- model_values[which.min(err_cv[,1]),]
}
par_best <- list( depth=model_best$depth, nrounds=model_best$nrounds)
par_best
source("../lib/train_xgboost.R")
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
#tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
load("./output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("../lib/train_xgboost.R")
load("./output/feature_train.RData")
source("../lib/train_xgboost.R")
load("../output/feature_train.RData")
feat_train <- dat_train$feature
label_train <- dat_train$label
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for super-resolution=", tm_test[1], "s \n")
